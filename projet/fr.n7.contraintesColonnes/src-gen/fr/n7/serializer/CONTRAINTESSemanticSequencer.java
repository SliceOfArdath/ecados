/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.cONTRAINTES.CONTRAINTESPackage;
import fr.n7.cONTRAINTES.Colonne;
import fr.n7.cONTRAINTES.Comparaison;
import fr.n7.cONTRAINTES.Contrainte;
import fr.n7.cONTRAINTES.EnsembleContraintes;
import fr.n7.cONTRAINTES.OperationBinaire;
import fr.n7.cONTRAINTES.OperationUnaire;
import fr.n7.services.CONTRAINTESGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CONTRAINTESSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CONTRAINTESGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CONTRAINTESPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CONTRAINTESPackage.COLONNE:
				sequence_Colonne(context, (Colonne) semanticObject); 
				return; 
			case CONTRAINTESPackage.COMPARAISON:
				sequence_Comparaison(context, (Comparaison) semanticObject); 
				return; 
			case CONTRAINTESPackage.CONTRAINTE:
				sequence_Contrainte(context, (Contrainte) semanticObject); 
				return; 
			case CONTRAINTESPackage.ENSEMBLE_CONTRAINTES:
				sequence_EnsembleContraintes(context, (EnsembleContraintes) semanticObject); 
				return; 
			case CONTRAINTESPackage.OPERATION_BINAIRE:
				sequence_OperationBinaire(context, (OperationBinaire) semanticObject); 
				return; 
			case CONTRAINTESPackage.OPERATION_UNAIRE:
				sequence_OperationUnaire(context, (OperationUnaire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Colonne returns Colonne
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Colonne(ISerializationContext context, Colonne semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.COLONNE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.COLONNE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Comparaison
	 *     Comparaison returns Comparaison
	 *
	 * Constraint:
	 *     (comparateur=ComparateurType constante=FLOAT)
	 */
	protected void sequence_Comparaison(ISerializationContext context, Comparaison semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.COMPARAISON__COMPARATEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.COMPARAISON__COMPARATEUR));
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.COMPARAISON__CONSTANTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.COMPARAISON__CONSTANTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparaisonAccess().getComparateurComparateurTypeEnumRuleCall_1_0(), semanticObject.getComparateur());
		feeder.accept(grammarAccess.getComparaisonAccess().getConstanteFLOATTerminalRuleCall_2_0(), semanticObject.getConstante());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Contrainte returns Contrainte
	 *
	 * Constraint:
	 *     (name=ID colonnes+=Colonne colonnes+=Colonne* expression+=Expression*)
	 */
	protected void sequence_Contrainte(ISerializationContext context, Contrainte semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnsembleContraintes returns EnsembleContraintes
	 *
	 * Constraint:
	 *     contraintes+=Contrainte+
	 */
	protected void sequence_EnsembleContraintes(ISerializationContext context, EnsembleContraintes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OperationBinaire
	 *     OperationBinaire returns OperationBinaire
	 *
	 * Constraint:
	 *     (contrainteGauche=Expression operande=OperandeBinaireType contrainteDroite=Expression)
	 */
	protected void sequence_OperationBinaire(ISerializationContext context, OperationBinaire semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.OPERATION_BINAIRE__CONTRAINTE_GAUCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.OPERATION_BINAIRE__CONTRAINTE_GAUCHE));
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.OPERATION_BINAIRE__OPERANDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.OPERATION_BINAIRE__OPERANDE));
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.OPERATION_BINAIRE__CONTRAINTE_DROITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.OPERATION_BINAIRE__CONTRAINTE_DROITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationBinaireAccess().getContrainteGaucheExpressionParserRuleCall_1_0(), semanticObject.getContrainteGauche());
		feeder.accept(grammarAccess.getOperationBinaireAccess().getOperandeOperandeBinaireTypeEnumRuleCall_2_0(), semanticObject.getOperande());
		feeder.accept(grammarAccess.getOperationBinaireAccess().getContrainteDroiteExpressionParserRuleCall_3_0(), semanticObject.getContrainteDroite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OperationUnaire
	 *     OperationUnaire returns OperationUnaire
	 *
	 * Constraint:
	 *     (operande=OperandeUnaireType contrainte=Expression)
	 */
	protected void sequence_OperationUnaire(ISerializationContext context, OperationUnaire semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.OPERATION_UNAIRE__OPERANDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.OPERATION_UNAIRE__OPERANDE));
			if (transientValues.isValueTransient(semanticObject, CONTRAINTESPackage.Literals.OPERATION_UNAIRE__CONTRAINTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CONTRAINTESPackage.Literals.OPERATION_UNAIRE__CONTRAINTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationUnaireAccess().getOperandeOperandeUnaireTypeEnumRuleCall_0_0(), semanticObject.getOperande());
		feeder.accept(grammarAccess.getOperationUnaireAccess().getContrainteExpressionParserRuleCall_2_0(), semanticObject.getContrainte());
		feeder.finish();
	}
	
	
}
