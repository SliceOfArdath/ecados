/*
 * generated by Xtext 2.23.0
 */
grammar InternalCONTRAINTES;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.n7.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.n7.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.n7.services.CONTRAINTESGrammarAccess;

}

@parser::members {

 	private CONTRAINTESGrammarAccess grammarAccess;

    public InternalCONTRAINTESParser(TokenStream input, CONTRAINTESGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "EnsembleContraintes";
   	}

   	@Override
   	protected CONTRAINTESGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleEnsembleContraintes
entryRuleEnsembleContraintes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnsembleContraintesRule()); }
	iv_ruleEnsembleContraintes=ruleEnsembleContraintes
	{ $current=$iv_ruleEnsembleContraintes.current; }
	EOF;

// Rule EnsembleContraintes
ruleEnsembleContraintes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEnsembleContraintesAccess().getContraintesContrainteParserRuleCall_0());
			}
			lv_contraintes_0_0=ruleContrainte
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEnsembleContraintesRule());
				}
				add(
					$current,
					"contraintes",
					lv_contraintes_0_0,
					"fr.n7.CONTRAINTES.Contrainte");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleContrainte
entryRuleContrainte returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContrainteRule()); }
	iv_ruleContrainte=ruleContrainte
	{ $current=$iv_ruleContrainte.current; }
	EOF;

// Rule Contrainte
ruleContrainte returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contrainte'
		{
			newLeafNode(otherlv_0, grammarAccess.getContrainteAccess().getContrainteKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContrainteAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContrainteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getContrainteAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContrainteAccess().getColonnesColonneParserRuleCall_3_0());
				}
				lv_colonnes_3_0=ruleColonne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContrainteRule());
					}
					add(
						$current,
						"colonnes",
						lv_colonnes_3_0,
						"fr.n7.CONTRAINTES.Colonne");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getContrainteAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContrainteAccess().getColonnesColonneParserRuleCall_4_1_0());
					}
					lv_colonnes_5_0=ruleColonne
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContrainteRule());
						}
						add(
							$current,
							"colonnes",
							lv_colonnes_5_0,
							"fr.n7.CONTRAINTES.Colonne");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getContrainteAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getContrainteAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContrainteAccess().getExpressionExpressionParserRuleCall_7_0_0());
					}
					lv_expression_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContrainteRule());
						}
						add(
							$current,
							"expression",
							lv_expression_8_0,
							"fr.n7.CONTRAINTES.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getContrainteAccess().getSemicolonKeyword_7_1());
			}
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getContrainteAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleColonne
entryRuleColonne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneRule()); }
	iv_ruleColonne=ruleColonne
	{ $current=$iv_ruleColonne.current; }
	EOF;

// Rule Colonne
ruleColonne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getColonneAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getColonneRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getComparaisonParserRuleCall_0());
		}
		this_Comparaison_0=ruleComparaison
		{
			$current = $this_Comparaison_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getOperationBinaireParserRuleCall_1());
		}
		this_OperationBinaire_1=ruleOperationBinaire
		{
			$current = $this_OperationBinaire_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getOperationUnaireParserRuleCall_2());
		}
		this_OperationUnaire_2=ruleOperationUnaire
		{
			$current = $this_OperationUnaire_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComparaison
entryRuleComparaison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparaisonRule()); }
	iv_ruleComparaison=ruleComparaison
	{ $current=$iv_ruleComparaison.current; }
	EOF;

// Rule Comparaison
ruleComparaison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='valeur'
		{
			newLeafNode(otherlv_0, grammarAccess.getComparaisonAccess().getValeurKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComparaisonAccess().getComparateurComparateurTypeEnumRuleCall_1_0());
				}
				lv_comparateur_1_0=ruleComparateurType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparaisonRule());
					}
					set(
						$current,
						"comparateur",
						lv_comparateur_1_0,
						"fr.n7.CONTRAINTES.ComparateurType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_constante_2_0=RULE_FLOAT
				{
					newLeafNode(lv_constante_2_0, grammarAccess.getComparaisonAccess().getConstanteFLOATTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparaisonRule());
					}
					setWithLastConsumed(
						$current,
						"constante",
						lv_constante_2_0,
						"fr.n7.CONTRAINTES.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleOperationBinaire
entryRuleOperationBinaire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationBinaireRule()); }
	iv_ruleOperationBinaire=ruleOperationBinaire
	{ $current=$iv_ruleOperationBinaire.current; }
	EOF;

// Rule OperationBinaire
ruleOperationBinaire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationBinaireAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationBinaireAccess().getContrainteGaucheExpressionParserRuleCall_1_0());
				}
				lv_contrainteGauche_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationBinaireRule());
					}
					set(
						$current,
						"contrainteGauche",
						lv_contrainteGauche_1_0,
						"fr.n7.CONTRAINTES.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationBinaireAccess().getOperandeOperandeBinaireTypeEnumRuleCall_2_0());
				}
				lv_operande_2_0=ruleOperandeBinaireType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationBinaireRule());
					}
					set(
						$current,
						"operande",
						lv_operande_2_0,
						"fr.n7.CONTRAINTES.OperandeBinaireType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationBinaireAccess().getContrainteDroiteExpressionParserRuleCall_3_0());
				}
				lv_contrainteDroite_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationBinaireRule());
					}
					set(
						$current,
						"contrainteDroite",
						lv_contrainteDroite_3_0,
						"fr.n7.CONTRAINTES.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getOperationBinaireAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleOperationUnaire
entryRuleOperationUnaire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationUnaireRule()); }
	iv_ruleOperationUnaire=ruleOperationUnaire
	{ $current=$iv_ruleOperationUnaire.current; }
	EOF;

// Rule OperationUnaire
ruleOperationUnaire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationUnaireAccess().getOperandeOperandeUnaireTypeEnumRuleCall_0_0());
				}
				lv_operande_0_0=ruleOperandeUnaireType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationUnaireRule());
					}
					set(
						$current,
						"operande",
						lv_operande_0_0,
						"fr.n7.CONTRAINTES.OperandeUnaireType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationUnaireAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationUnaireAccess().getContrainteExpressionParserRuleCall_2_0());
				}
				lv_contrainte_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationUnaireRule());
					}
					set(
						$current,
						"contrainte",
						lv_contrainte_2_0,
						"fr.n7.CONTRAINTES.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperationUnaireAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Rule ComparateurType
ruleComparateurType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getComparateurTypeAccess().getInfEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparateurTypeAccess().getInfEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<='
			{
				$current = grammarAccess.getComparateurTypeAccess().getInfegEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparateurTypeAccess().getInfegEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getComparateurTypeAccess().getSupEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparateurTypeAccess().getSupEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getComparateurTypeAccess().getSupegEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparateurTypeAccess().getSupegEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='='
			{
				$current = grammarAccess.getComparateurTypeAccess().getEgEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparateurTypeAccess().getEgEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule OperandeBinaireType
ruleOperandeBinaireType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='et'
			{
				$current = grammarAccess.getOperandeBinaireTypeAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperandeBinaireTypeAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ou'
			{
				$current = grammarAccess.getOperandeBinaireTypeAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperandeBinaireTypeAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule OperandeUnaireType
ruleOperandeUnaireType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='!'
		{
			$current = grammarAccess.getOperandeUnaireTypeAccess().getNonEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getOperandeUnaireTypeAccess().getNonEnumLiteralDeclaration());
		}
	)
;

RULE_FLOAT : ('-'|'+')? RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
