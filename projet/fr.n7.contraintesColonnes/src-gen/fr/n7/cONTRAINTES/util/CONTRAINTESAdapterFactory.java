/**
 * generated by Xtext 2.23.0
 */
package fr.n7.cONTRAINTES.util;

import fr.n7.cONTRAINTES.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.n7.cONTRAINTES.CONTRAINTESPackage
 * @generated
 */
public class CONTRAINTESAdapterFactory extends AdapterFactoryImpl
{
  /**
	 * The cached model package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected static CONTRAINTESPackage modelPackage;

  /**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public CONTRAINTESAdapterFactory()
  {
		if (modelPackage == null) {
			modelPackage = CONTRAINTESPackage.eINSTANCE;
		}
	}

  /**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object object)
  {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

  /**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected CONTRAINTESSwitch<Adapter> modelSwitch =
    new CONTRAINTESSwitch<Adapter>() {
			@Override
			public Adapter caseEnsembleContraintes(EnsembleContraintes object) {
				return createEnsembleContraintesAdapter();
			}
			@Override
			public Adapter caseContrainte(Contrainte object) {
				return createContrainteAdapter();
			}
			@Override
			public Adapter caseColonne(Colonne object) {
				return createColonneAdapter();
			}
			@Override
			public Adapter caseExpression(Expression object) {
				return createExpressionAdapter();
			}
			@Override
			public Adapter caseComparaison(Comparaison object) {
				return createComparaisonAdapter();
			}
			@Override
			public Adapter caseOperationBinaire(OperationBinaire object) {
				return createOperationBinaireAdapter();
			}
			@Override
			public Adapter caseOperationUnaire(OperationUnaire object) {
				return createOperationUnaireAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

  /**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
  @Override
  public Adapter createAdapter(Notifier target)
  {
		return modelSwitch.doSwitch((EObject)target);
	}


  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.EnsembleContraintes <em>Ensemble Contraintes</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.EnsembleContraintes
	 * @generated
	 */
  public Adapter createEnsembleContraintesAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.Contrainte <em>Contrainte</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.Contrainte
	 * @generated
	 */
  public Adapter createContrainteAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.Colonne <em>Colonne</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.Colonne
	 * @generated
	 */
  public Adapter createColonneAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.Expression <em>Expression</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.Expression
	 * @generated
	 */
  public Adapter createExpressionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.Comparaison <em>Comparaison</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.Comparaison
	 * @generated
	 */
  public Adapter createComparaisonAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.OperationBinaire <em>Operation Binaire</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.OperationBinaire
	 * @generated
	 */
  public Adapter createOperationBinaireAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.n7.cONTRAINTES.OperationUnaire <em>Operation Unaire</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.n7.cONTRAINTES.OperationUnaire
	 * @generated
	 */
  public Adapter createOperationUnaireAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
  public Adapter createEObjectAdapter()
  {
		return null;
	}

} //CONTRAINTESAdapterFactory
