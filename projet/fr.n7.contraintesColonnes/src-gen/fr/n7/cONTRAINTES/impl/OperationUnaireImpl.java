/**
 * generated by Xtext 2.23.0
 */
package fr.n7.cONTRAINTES.impl;

import fr.n7.cONTRAINTES.CONTRAINTESPackage;
import fr.n7.cONTRAINTES.Expression;
import fr.n7.cONTRAINTES.OperandeUnaireType;
import fr.n7.cONTRAINTES.OperationUnaire;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operation Unaire</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.cONTRAINTES.impl.OperationUnaireImpl#getOperande <em>Operande</em>}</li>
 *   <li>{@link fr.n7.cONTRAINTES.impl.OperationUnaireImpl#getContrainte <em>Contrainte</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationUnaireImpl extends ExpressionImpl implements OperationUnaire
{
  /**
	 * The default value of the '{@link #getOperande() <em>Operande</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getOperande()
	 * @generated
	 * @ordered
	 */
  protected static final OperandeUnaireType OPERANDE_EDEFAULT = OperandeUnaireType.NON;

  /**
	 * The cached value of the '{@link #getOperande() <em>Operande</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getOperande()
	 * @generated
	 * @ordered
	 */
  protected OperandeUnaireType operande = OPERANDE_EDEFAULT;

  /**
	 * The cached value of the '{@link #getContrainte() <em>Contrainte</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getContrainte()
	 * @generated
	 * @ordered
	 */
  protected Expression contrainte;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected OperationUnaireImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return CONTRAINTESPackage.Literals.OPERATION_UNAIRE;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public OperandeUnaireType getOperande()
  {
		return operande;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setOperande(OperandeUnaireType newOperande)
  {
		OperandeUnaireType oldOperande = operande;
		operande = newOperande == null ? OPERANDE_EDEFAULT : newOperande;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CONTRAINTESPackage.OPERATION_UNAIRE__OPERANDE, oldOperande, operande));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Expression getContrainte()
  {
		return contrainte;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetContrainte(Expression newContrainte, NotificationChain msgs)
  {
		Expression oldContrainte = contrainte;
		contrainte = newContrainte;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE, oldContrainte, newContrainte);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setContrainte(Expression newContrainte)
  {
		if (newContrainte != contrainte) {
			NotificationChain msgs = null;
			if (contrainte != null)
				msgs = ((InternalEObject)contrainte).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE, null, msgs);
			if (newContrainte != null)
				msgs = ((InternalEObject)newContrainte).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE, null, msgs);
			msgs = basicSetContrainte(newContrainte, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE, newContrainte, newContrainte));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE:
				return basicSetContrainte(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case CONTRAINTESPackage.OPERATION_UNAIRE__OPERANDE:
				return getOperande();
			case CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE:
				return getContrainte();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case CONTRAINTESPackage.OPERATION_UNAIRE__OPERANDE:
				setOperande((OperandeUnaireType)newValue);
				return;
			case CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE:
				setContrainte((Expression)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case CONTRAINTESPackage.OPERATION_UNAIRE__OPERANDE:
				setOperande(OPERANDE_EDEFAULT);
				return;
			case CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE:
				setContrainte((Expression)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case CONTRAINTESPackage.OPERATION_UNAIRE__OPERANDE:
				return operande != OPERANDE_EDEFAULT;
			case CONTRAINTESPackage.OPERATION_UNAIRE__CONTRAINTE:
				return contrainte != null;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (operande: ");
		result.append(operande);
		result.append(')');
		return result.toString();
	}

} //OperationUnaireImpl
