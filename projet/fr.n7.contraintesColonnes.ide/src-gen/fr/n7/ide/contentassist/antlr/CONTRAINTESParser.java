/*
 * generated by Xtext 2.23.0
 */
package fr.n7.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.ide.contentassist.antlr.internal.InternalCONTRAINTESParser;
import fr.n7.services.CONTRAINTESGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CONTRAINTESParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CONTRAINTESGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CONTRAINTESGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getComparateurTypeAccess().getAlternatives(), "rule__ComparateurType__Alternatives");
			builder.put(grammarAccess.getOperandeBinaireTypeAccess().getAlternatives(), "rule__OperandeBinaireType__Alternatives");
			builder.put(grammarAccess.getContrainteAccess().getGroup(), "rule__Contrainte__Group__0");
			builder.put(grammarAccess.getContrainteAccess().getGroup_4(), "rule__Contrainte__Group_4__0");
			builder.put(grammarAccess.getContrainteAccess().getGroup_7(), "rule__Contrainte__Group_7__0");
			builder.put(grammarAccess.getComparaisonAccess().getGroup(), "rule__Comparaison__Group__0");
			builder.put(grammarAccess.getOperationBinaireAccess().getGroup(), "rule__OperationBinaire__Group__0");
			builder.put(grammarAccess.getOperationUnaireAccess().getGroup(), "rule__OperationUnaire__Group__0");
			builder.put(grammarAccess.getEnsembleContraintesAccess().getContraintesAssignment(), "rule__EnsembleContraintes__ContraintesAssignment");
			builder.put(grammarAccess.getContrainteAccess().getNameAssignment_1(), "rule__Contrainte__NameAssignment_1");
			builder.put(grammarAccess.getContrainteAccess().getColonnesAssignment_3(), "rule__Contrainte__ColonnesAssignment_3");
			builder.put(grammarAccess.getContrainteAccess().getColonnesAssignment_4_1(), "rule__Contrainte__ColonnesAssignment_4_1");
			builder.put(grammarAccess.getContrainteAccess().getExpressionAssignment_7_0(), "rule__Contrainte__ExpressionAssignment_7_0");
			builder.put(grammarAccess.getColonneAccess().getNameAssignment(), "rule__Colonne__NameAssignment");
			builder.put(grammarAccess.getComparaisonAccess().getComparateurAssignment_1(), "rule__Comparaison__ComparateurAssignment_1");
			builder.put(grammarAccess.getComparaisonAccess().getConstanteAssignment_2(), "rule__Comparaison__ConstanteAssignment_2");
			builder.put(grammarAccess.getOperationBinaireAccess().getContrainteGaucheAssignment_1(), "rule__OperationBinaire__ContrainteGaucheAssignment_1");
			builder.put(grammarAccess.getOperationBinaireAccess().getOperandeAssignment_2(), "rule__OperationBinaire__OperandeAssignment_2");
			builder.put(grammarAccess.getOperationBinaireAccess().getContrainteDroiteAssignment_3(), "rule__OperationBinaire__ContrainteDroiteAssignment_3");
			builder.put(grammarAccess.getOperationUnaireAccess().getOperandeAssignment_0(), "rule__OperationUnaire__OperandeAssignment_0");
			builder.put(grammarAccess.getOperationUnaireAccess().getContrainteAssignment_2(), "rule__OperationUnaire__ContrainteAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CONTRAINTESGrammarAccess grammarAccess;

	@Override
	protected InternalCONTRAINTESParser createParser() {
		InternalCONTRAINTESParser result = new InternalCONTRAINTESParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CONTRAINTESGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CONTRAINTESGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
