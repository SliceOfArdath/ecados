/*
 * generated by Xtext 2.23.0
 */
grammar InternalCONTRAINTES;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.n7.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.n7.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.n7.services.CONTRAINTESGrammarAccess;

}
@parser::members {
	private CONTRAINTESGrammarAccess grammarAccess;

	public void setGrammarAccess(CONTRAINTESGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleEnsembleContraintes
entryRuleEnsembleContraintes
:
{ before(grammarAccess.getEnsembleContraintesRule()); }
	 ruleEnsembleContraintes
{ after(grammarAccess.getEnsembleContraintesRule()); } 
	 EOF 
;

// Rule EnsembleContraintes
ruleEnsembleContraintes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getEnsembleContraintesAccess().getContraintesAssignment()); }
			(rule__EnsembleContraintes__ContraintesAssignment)
			{ after(grammarAccess.getEnsembleContraintesAccess().getContraintesAssignment()); }
		)
		(
			{ before(grammarAccess.getEnsembleContraintesAccess().getContraintesAssignment()); }
			(rule__EnsembleContraintes__ContraintesAssignment)*
			{ after(grammarAccess.getEnsembleContraintesAccess().getContraintesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContrainte
entryRuleContrainte
:
{ before(grammarAccess.getContrainteRule()); }
	 ruleContrainte
{ after(grammarAccess.getContrainteRule()); } 
	 EOF 
;

// Rule Contrainte
ruleContrainte 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContrainteAccess().getGroup()); }
		(rule__Contrainte__Group__0)
		{ after(grammarAccess.getContrainteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColonne
entryRuleColonne
:
{ before(grammarAccess.getColonneRule()); }
	 ruleColonne
{ after(grammarAccess.getColonneRule()); } 
	 EOF 
;

// Rule Colonne
ruleColonne 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColonneAccess().getNameAssignment()); }
		(rule__Colonne__NameAssignment)
		{ after(grammarAccess.getColonneAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparaison
entryRuleComparaison
:
{ before(grammarAccess.getComparaisonRule()); }
	 ruleComparaison
{ after(grammarAccess.getComparaisonRule()); } 
	 EOF 
;

// Rule Comparaison
ruleComparaison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparaisonAccess().getGroup()); }
		(rule__Comparaison__Group__0)
		{ after(grammarAccess.getComparaisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationBinaire
entryRuleOperationBinaire
:
{ before(grammarAccess.getOperationBinaireRule()); }
	 ruleOperationBinaire
{ after(grammarAccess.getOperationBinaireRule()); } 
	 EOF 
;

// Rule OperationBinaire
ruleOperationBinaire 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationBinaireAccess().getGroup()); }
		(rule__OperationBinaire__Group__0)
		{ after(grammarAccess.getOperationBinaireAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationUnaire
entryRuleOperationUnaire
:
{ before(grammarAccess.getOperationUnaireRule()); }
	 ruleOperationUnaire
{ after(grammarAccess.getOperationUnaireRule()); } 
	 EOF 
;

// Rule OperationUnaire
ruleOperationUnaire 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationUnaireAccess().getGroup()); }
		(rule__OperationUnaire__Group__0)
		{ after(grammarAccess.getOperationUnaireAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ComparateurType
ruleComparateurType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparateurTypeAccess().getAlternatives()); }
		(rule__ComparateurType__Alternatives)
		{ after(grammarAccess.getComparateurTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OperandeBinaireType
ruleOperandeBinaireType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandeBinaireTypeAccess().getAlternatives()); }
		(rule__OperandeBinaireType__Alternatives)
		{ after(grammarAccess.getOperandeBinaireTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OperandeUnaireType
ruleOperandeUnaireType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandeUnaireTypeAccess().getNonEnumLiteralDeclaration()); }
		('!')
		{ after(grammarAccess.getOperandeUnaireTypeAccess().getNonEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getComparaisonParserRuleCall_0()); }
		ruleComparaison
		{ after(grammarAccess.getExpressionAccess().getComparaisonParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperationBinaireParserRuleCall_1()); }
		ruleOperationBinaire
		{ after(grammarAccess.getExpressionAccess().getOperationBinaireParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperationUnaireParserRuleCall_2()); }
		ruleOperationUnaire
		{ after(grammarAccess.getExpressionAccess().getOperationUnaireParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparateurType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparateurTypeAccess().getInfEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getComparateurTypeAccess().getInfEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparateurTypeAccess().getInfegEnumLiteralDeclaration_1()); }
		('<=')
		{ after(grammarAccess.getComparateurTypeAccess().getInfegEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparateurTypeAccess().getSupEnumLiteralDeclaration_2()); }
		('>')
		{ after(grammarAccess.getComparateurTypeAccess().getSupEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparateurTypeAccess().getSupegEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getComparateurTypeAccess().getSupegEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparateurTypeAccess().getEgEnumLiteralDeclaration_4()); }
		('=')
		{ after(grammarAccess.getComparateurTypeAccess().getEgEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandeBinaireType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandeBinaireTypeAccess().getAndEnumLiteralDeclaration_0()); }
		('et')
		{ after(grammarAccess.getOperandeBinaireTypeAccess().getAndEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperandeBinaireTypeAccess().getOrEnumLiteralDeclaration_1()); }
		('ou')
		{ after(grammarAccess.getOperandeBinaireTypeAccess().getOrEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__0__Impl
	rule__Contrainte__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getContrainteKeyword_0()); }
	'contrainte'
	{ after(grammarAccess.getContrainteAccess().getContrainteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__1__Impl
	rule__Contrainte__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getNameAssignment_1()); }
	(rule__Contrainte__NameAssignment_1)
	{ after(grammarAccess.getContrainteAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__2__Impl
	rule__Contrainte__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getContrainteAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__3__Impl
	rule__Contrainte__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getColonnesAssignment_3()); }
	(rule__Contrainte__ColonnesAssignment_3)
	{ after(grammarAccess.getContrainteAccess().getColonnesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__4__Impl
	rule__Contrainte__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getGroup_4()); }
	(rule__Contrainte__Group_4__0)*
	{ after(grammarAccess.getContrainteAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__5__Impl
	rule__Contrainte__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getContrainteAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__6__Impl
	rule__Contrainte__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getContrainteAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__7__Impl
	rule__Contrainte__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getGroup_7()); }
	(rule__Contrainte__Group_7__0)*
	{ after(grammarAccess.getContrainteAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getContrainteAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Contrainte__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group_4__0__Impl
	rule__Contrainte__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getContrainteAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getColonnesAssignment_4_1()); }
	(rule__Contrainte__ColonnesAssignment_4_1)
	{ after(grammarAccess.getContrainteAccess().getColonnesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Contrainte__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group_7__0__Impl
	rule__Contrainte__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getExpressionAssignment_7_0()); }
	(rule__Contrainte__ExpressionAssignment_7_0)
	{ after(grammarAccess.getContrainteAccess().getExpressionAssignment_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contrainte__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContrainteAccess().getSemicolonKeyword_7_1()); }
	';'
	{ after(grammarAccess.getContrainteAccess().getSemicolonKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparaison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparaison__Group__0__Impl
	rule__Comparaison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparaisonAccess().getValeurKeyword_0()); }
	'valeur'
	{ after(grammarAccess.getComparaisonAccess().getValeurKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparaison__Group__1__Impl
	rule__Comparaison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparaisonAccess().getComparateurAssignment_1()); }
	(rule__Comparaison__ComparateurAssignment_1)
	{ after(grammarAccess.getComparaisonAccess().getComparateurAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparaison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparaisonAccess().getConstanteAssignment_2()); }
	(rule__Comparaison__ConstanteAssignment_2)
	{ after(grammarAccess.getComparaisonAccess().getConstanteAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationBinaire__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationBinaire__Group__0__Impl
	rule__OperationBinaire__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationBinaireAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getOperationBinaireAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationBinaire__Group__1__Impl
	rule__OperationBinaire__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationBinaireAccess().getContrainteGaucheAssignment_1()); }
	(rule__OperationBinaire__ContrainteGaucheAssignment_1)
	{ after(grammarAccess.getOperationBinaireAccess().getContrainteGaucheAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationBinaire__Group__2__Impl
	rule__OperationBinaire__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationBinaireAccess().getOperandeAssignment_2()); }
	(rule__OperationBinaire__OperandeAssignment_2)
	{ after(grammarAccess.getOperationBinaireAccess().getOperandeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationBinaire__Group__3__Impl
	rule__OperationBinaire__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationBinaireAccess().getContrainteDroiteAssignment_3()); }
	(rule__OperationBinaire__ContrainteDroiteAssignment_3)
	{ after(grammarAccess.getOperationBinaireAccess().getContrainteDroiteAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationBinaire__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationBinaireAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getOperationBinaireAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationUnaire__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationUnaire__Group__0__Impl
	rule__OperationUnaire__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationUnaireAccess().getOperandeAssignment_0()); }
	(rule__OperationUnaire__OperandeAssignment_0)
	{ after(grammarAccess.getOperationUnaireAccess().getOperandeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationUnaire__Group__1__Impl
	rule__OperationUnaire__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationUnaireAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOperationUnaireAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationUnaire__Group__2__Impl
	rule__OperationUnaire__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationUnaireAccess().getContrainteAssignment_2()); }
	(rule__OperationUnaire__ContrainteAssignment_2)
	{ after(grammarAccess.getOperationUnaireAccess().getContrainteAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationUnaire__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationUnaireAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getOperationUnaireAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnsembleContraintes__ContraintesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnsembleContraintesAccess().getContraintesContrainteParserRuleCall_0()); }
		ruleContrainte
		{ after(grammarAccess.getEnsembleContraintesAccess().getContraintesContrainteParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContrainteAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getContrainteAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__ColonnesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContrainteAccess().getColonnesColonneParserRuleCall_3_0()); }
		ruleColonne
		{ after(grammarAccess.getContrainteAccess().getColonnesColonneParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__ColonnesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContrainteAccess().getColonnesColonneParserRuleCall_4_1_0()); }
		ruleColonne
		{ after(grammarAccess.getContrainteAccess().getColonnesColonneParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contrainte__ExpressionAssignment_7_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContrainteAccess().getExpressionExpressionParserRuleCall_7_0_0()); }
		ruleExpression
		{ after(grammarAccess.getContrainteAccess().getExpressionExpressionParserRuleCall_7_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colonne__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColonneAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getColonneAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__ComparateurAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparaisonAccess().getComparateurComparateurTypeEnumRuleCall_1_0()); }
		ruleComparateurType
		{ after(grammarAccess.getComparaisonAccess().getComparateurComparateurTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparaison__ConstanteAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparaisonAccess().getConstanteFLOATTerminalRuleCall_2_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getComparaisonAccess().getConstanteFLOATTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__ContrainteGaucheAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationBinaireAccess().getContrainteGaucheExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getOperationBinaireAccess().getContrainteGaucheExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__OperandeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationBinaireAccess().getOperandeOperandeBinaireTypeEnumRuleCall_2_0()); }
		ruleOperandeBinaireType
		{ after(grammarAccess.getOperationBinaireAccess().getOperandeOperandeBinaireTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationBinaire__ContrainteDroiteAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationBinaireAccess().getContrainteDroiteExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getOperationBinaireAccess().getContrainteDroiteExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__OperandeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationUnaireAccess().getOperandeOperandeUnaireTypeEnumRuleCall_0_0()); }
		ruleOperandeUnaireType
		{ after(grammarAccess.getOperationUnaireAccess().getOperandeOperandeUnaireTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationUnaire__ContrainteAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationUnaireAccess().getContrainteExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getOperationUnaireAccess().getContrainteExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_FLOAT : ('-'|'+')? RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
